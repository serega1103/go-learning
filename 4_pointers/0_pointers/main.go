package main

import "fmt"

/*
	-------------
	| Указатель |
	-------------
	Указатель — это переменная, которая хранит адрес в памяти другой переменной.
	Объявляется с помощью символа звёздочка (*).

	Сравнение с обычными переменными:
	- Обычная переменная хранит данные (например: число, строку).
    - Указатель хранит адрес на место в памяти, где лежат эти данные.

	-----------
	| Справка |
	-----------
	Указатель — pointer (англ.)
	Указатели принято именовать как ptr, либо даже просто p.
*/

func main() {
	// ---------------------------
	// | 1) Объявление указателя |
	// ---------------------------
	// *int — тип "указатель на int".
	// var p *int
	// fmt.Println(p)
	// fmt.Printf("%p", p)

	// -------------------------------
	// | 2) Взятие адреса переменной |
	// -------------------------------
	// var x int = 10

	// Оператор & — возвращает адрес переменной
	// var ptr *int = &x
	// Теперь ptr хранит указатель на x (хранит адрес переменной x)

	// fmt.Println("Значение x:", x)      // 10
	// fmt.Println()
    // fmt.Println("Адрес x:", &x)        // 0xc0000180a8 (пример)
    // fmt.Println("Значение ptr:", ptr)  // 0xc0000180a8 (тот же адрес)

	// -------------------------------
	// | 3) Рызыименование указателя |
	// -------------------------------
	// *ptr — разыменование (получение значения по адресу).
	// fmt.Println("Значение по адресу ptr:", *ptr)  // Вывод: 10, так как указатель указывает на переменную x

	// -------------------------
	// | 4) Изменение значения |
	// -------------------------
	// fmt.Println("Исходное значение x:", x)  // 10

	// *ptr = 30 изменяет значение y.
    // *ptr = 30
    // fmt.Println("Новое значение x:", x)   // 30

	// ------------------------
	// | 5) Нулевой указатель |
	// ------------------------
	// Указатель, который ни на что не ссылается, имеет значение nil.

	// По-умолчанию указатель инициализируется значением nil
	// var pointer *int
    // fmt.Println("Указатель pointer:", pointer)  // Выведет nil

	// Проверка, что указатель равен nil
    // if pointer == nil {
    //     fmt.Println("Указатель пустой!")
    // }

	// Важно! Попытка разыменовать nil-указатель вызовет панику!
	// if pointer != nil {
	// 	fmt.Println(*pointer)
	// }

	// panic: runtime error: invalid memory address or nil pointer dereference
}